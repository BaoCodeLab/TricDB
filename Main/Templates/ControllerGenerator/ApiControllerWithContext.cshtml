@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Model.Model;
using Main.ViewModels;
using TDSCoreLib;
using System.Linq.Dynamic.Core;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Main.platform;
using Microsoft.AspNetCore.Authorization;

namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
    string baseRoute = string.Empty;
    try
    {
        string[] temp = Model.ControllerRootName.Split(new char[] { '-', '_', '~' }, StringSplitOptions.RemoveEmptyEntries);
        baseRoute = "api/" + (temp.Length > 2 ? (temp[temp.Length - 2].ToLower() + "/") : "") + temp[temp.Length - 1].ToLower();
    }
    catch
    {
        baseRoute = routePrefix.ToLower();
    }
}
    [Produces("application/json")]
    [Route("@baseRoute"),Authorize]
    [ApiController]
    public class @Model.ControllerName : Controller
    {
    private readonly @Model.ContextTypeName _context;

    public @(Model.ControllerName)(@Model.ContextTypeName context)
    {
    _context = context;
    }
    [HttpGet,Route("all")]
    public List<VM_@(Model.ModelTypeName)>
        GetAll()
        {
        var mData = (from d in _context.@(entitySetName) where d.IS_DELETE==false select d).ToList();
        var vmData = Mapper.Map< List<@(Model.ModelTypeName)>
            , List<VM_@(Model.ModelTypeName)>
                >(mData);
                return vmData;
                }
                // GET: @baseRoute
                [HttpGet]
                public ResultList<VM_@(Model.ModelTypeName)>
                    Get([FromQuery]int page=1, int limit=10, string searchfield="", string searchword="",string field = "CREATE_DATE", string order = "DESC")
                    {
                    searchfield = string.IsNullOrEmpty(searchfield) ? "@primaryKeyName" : searchfield;
                    searchword = string.IsNullOrEmpty(searchword) ? "" : searchword;
                    string searchtype = ".Contains(@@0)";
                    if (typeof(@(entitySetName)).GetProperty(searchfield).PropertyType != typeof(System.String))
                    {
                    searchtype = "=@@0";
                    }
                    var query = _context.@(entitySetName).Where((searchfield + searchtype + " and is_delete == false"), searchword);
                    var result = query.OrderBy(field + " " + order).Skip((page - 1) * limit).Take(limit).ToList();
                    return new ResultList<VM_@(Model.ModelTypeName)>
                        {
                        TotalCount = query.Count(),
                        Results = Mapper.Map< List<@(Model.ModelTypeName)>
                            , List<VM_@(Model.ModelTypeName)>
                                >(result)
                                };

                                }

                                // GET: @baseRoute/@primaryKeyName
                                [HttpGet("{@primaryKeyName}")]
                                public async Task<IActionResult>
                                    Get([FromRoute] @primaryKeyShortTypeName @primaryKeyName)
                                    {
                                    if (!ModelState.IsValid)
                                    {
                                    return BadRequest(ModelState);
                                    }

                                    @Model.ModelTypeName queryResult = await _context.@(entitySetName).SingleOrDefaultAsync(m => m.@primaryKeyName == @primaryKeyName);

                                    if (queryResult == null)
                                    {
                                    return NotFound();
                                    }

                                    return Ok(Mapper.Map<@(Model.ModelTypeName), VM_@(Model.ModelTypeName)>
                                        (queryResult));
                                        }

          // PUT: @baseRoute/@primaryKeyName
           [HttpPut("{@primaryKeyName}")]
           public async Task<IActionResult> Update([FromRoute] string @primaryKeyName, [FromForm] VM_@(Model.ModelTypeName) postData)
        {
            

                if (@primaryKeyName != postData.@primaryKeyName)
                {
                    return new StatusCodeResult(StatusCodes.Status400BadRequest);
                }

                try
                {
                    @(Model.ModelTypeName) entity = Mapper.Map<VM_@(Model.ModelTypeName), @(Model.ModelTypeName)>
                        (postData);
                    _context.Update(entity);
                    await _context.SaveChangesAsync<VM_@(Model.ModelTypeName)>();
                    return Ok(new { success = "true" });
                }
                catch (DbUpdateConcurrencyException ex)
                {
                    if (!@(Model.ModelTypeName)Exists(postData.@primaryKeyName))
                    {
                        return new StatusCodeResult(StatusCodes.Status404NotFound);
                    }
                    else
                    {
                        return Ok(new { success = "false", msg = ex.Message });
                        //日志记录
                    }
                }
        }

        // POST: @baseRoute
        [HttpPost]
        public async Task<IActionResult> Create([FromForm] VM_@(Model.ModelTypeName) postData)
        {

                var data = Mapper.Map<VM_@(Model.ModelTypeName), @(Model.ModelTypeName)>(postData);
                _context.@(entitySetName).Add(data);
                try
                {
                    await _context.SaveChangesAsync();
                    return Ok();
                }
                catch (DbUpdateException ex)
                {
                    if (@(Model.ModelTypeName)Exists(postData.@primaryKeyName))
                    {
                        return BadRequest(WebAPIErrorMsg.Failure("已存在此编号数据，请检查"));
                    }
                    else
                    {
                        return BadRequest(WebAPIErrorMsg.Failure(ex.Message));
                    }
                }

        }

                                                        // DELETE: @baseRoute/@primaryKeyName
                                                        [HttpDelete("{@primaryKeyName?}")]
                                                        public async Task<IActionResult>
                                                            Delete([FromForm] @primaryKeyShortTypeName @primaryKeyName)
                                                            {
                                                            @(Model.ModelTypeName) @(Model.ModelTypeName.ToLower()) = await _context.@(Model.ModelTypeName).SingleOrDefaultAsync(m => m.@primaryKeyName == @primaryKeyName);
                                                            @(Model.ModelTypeName.ToLower()).IS_DELETE = true;
                                                            try
                                                            {
                                                            await _context.SaveChangesAsync();
                                                            return Ok(new { success = "true" });
                                                            }
                                                            catch (DbUpdateConcurrencyException ex)
                                                            {
                                                            if (!@(Model.ModelTypeName)Exists(@(Model.ModelTypeName.ToLower()).@primaryKeyName))
                                                            {
                                                            return Ok(new { msg = "数据不存在或已删除" });
                                                            }
                                                            else
                                                            {
                                                            return Ok(new { msg = ex.Message });
                                                            }
                                                            }
                                                            }


                                                            // 批量删除指定@primaryKeyName的数据
                                                            [HttpDelete, Route("bulkdelete")]
                                                            public async Task<IActionResult>
                                                                bulkDelete([FromForm] string @(primaryKeyName)s)
                                                                {
                                                                string[] @(primaryKeyName)_Array = @(primaryKeyName)s.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                                                                var list = _context.@(Model.ModelTypeName).Where(w=>@(primaryKeyName)_Array.Contains(w.@primaryKeyName)).ToList();
                                                                foreach (var item in list)
                                                                {
                                                                item.IS_DELETE = true;
                                                                }
                                                                int x = await _context.SaveChangesAsync();
                                                                if (x > -1)
                                                                {
                                                                return Ok(new { success = "true", msg = "成功删除" + x + "条数据" });
                                                                }
                                                                else
                                                                {
                                                                return Ok(new { success = "true", msg = "删除失败" });

                                                                }
                                                                }

                                                                private bool @(Model.ModelTypeName)Exists(@primaryKeyShortTypeName @primaryKeyName)
                                                                {
                                                                return _context.@(entitySetName).Any(e => e.@primaryKeyName == @primaryKeyName);
                                                                }
                                                                }
                                                                }
